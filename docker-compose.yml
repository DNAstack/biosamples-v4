version: '2'
services:
#docker-compose run --service-ports biosamples-pipelines 
  biosamples-pipelines:
    build: .
    image: biosamples:latest
    links:
    - biosamples-webapps-api
    volumes:
    - ./logs:/logs
    command:
    - java
    - -jar
    - pipelines-4.0.0-SNAPSHOT.jar
    environment:
    - spring.aop.proxy-target-class=true
    #from https://github.com/google/guava/blob/master/guava/src/com/google/common/cache/CacheBuilderSpec.java
    - spring.cache.guava.spec=maximumSize=500,expireAfterAccess=60s,recordStats=true
    - spring.datasource.erapro.url=jdbc:oracle:thin:@ora-vm-009.ebi.ac.uk:1541:ERAPRO
    - spring.datasource.erapro.username=era_reader
    - spring.datasource.erapro.password=reader
    - spring.datasource.erapro.driver-class-name=oracle.jdbc.driver.OracleDriver
  biosamples-webapps-api:
    image: biosamples:latest
    links:
    - solr
    - neo4j
    - mongo
    - rabbitmq
    command:
    - java
    - -jar
    - webapps-api-4.0.0-SNAPSHOT.war
    environment:
    - spring.data.solr.host=http://solr:8983/solr
    - spring.data.neo4j.uri=bolt://neo4j:7687
    - spring.data.neo4j.username=neo4j
    - spring.data.mongodb.host=mongo
    - spring.rabbitmq.publisher-confirms=true
    - spring.jackson.serialization-inclusion=non_null
    - spring.rabbitmq.host=rabbitmq
    ports:
    - 8081:8080
  biosamples-agents-neo4j:
    image: biosamples:latest
    links:
    - neo4j
    - rabbitmq
    command:
    - java
    - -jar
    - agents-neo4j-4.0.0-SNAPSHOT.jar
    environment:
    - spring.rabbitmq.publisher-confirms=true
    - spring.data.neo4j.uri=bolt://neo4j:7687
    - spring.data.neo4j.username=neo4j
    - spring.rabbitmq.host=rabbitmq
    - biosamples.agent.neo4j.stayalive=true
  biosamples-agents-solr:
    image: biosamples:latest
    links:
    - solr
    - rabbitmq
    command:
    - java
    - -jar
    - agents-solr-4.0.0-SNAPSHOT.jar
    environment:
    - spring.rabbitmq.publisher-confirms=true
    #need to have a high number of threads so they can each wait while they are batched into solr
    - spring.rabbitmq.listener.concurrency=250
    - spring.rabbitmq.listener.max-concurrency=250
    - spring.data.solr.host=http://solr:8983/solr
    - spring.rabbitmq.host=rabbitmq
    - biosamples.agent.solr.stayalive=true
  mongo:
    image: mongo:3.2
    volumes:
    - mongo_data:/data/db
    ports:
    - 27017:27017
  rabbitmq:
    image: rabbitmq:3.6-management
    hostname: biosamples-rabbitmq
    ports:
    - 15672:15672
    volumes:
    - rabbitmq_data:/var/lib/rabbitmq/mnesia/rabbit@biosamples-rabbitmq
  neo4j:
    image: neo4j:3.0
    environment:
    - NEO4J_AUTH=none
    ports:
    - 7687:7687
    - 7474:7474
    volumes:
    - neo4j_data:/data
  solr:
    image: solr:6.3-alpine
    ports:
    - 8983:8983
    volumes:
    - solr_samples_data:/opt/solr/server/solr/mycores
    environment:
    - VERBOSE=yes
    - SOLR_HEAP=16g
    entrypoint:
    - docker-entrypoint.sh
    - solr-precreate
    - samples
networks:
  default:
    ipam:
      config:
      - subnet: 172.28.0.0/16
volumes:
  #get image sizes with `du -h /var/lib/docker/volumes/*_data` as docker user (root)
  solr_samples_data: null
  mongo_data: null
  neo4j_data: null
  rabbitmq_data: null